/**
 * @(#)$CurrentFile
 *
 *<br> Copyright：Copyright (c) 2010
 *<br> @author XXXXX（XXXXX）
 *<br> 2010-05-01
 *<br> @version 1.0
 */

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.easecom.system.web;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.Globals;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.upload.FormFile;
import org.hibernate.Session;

import com.easecom.common.framework.hibernate.HibernateSessionFactory;
import com.easecom.common.framework.struts.BaseAction;
import com.easecom.common.framework.struts.UploadCmd;
import com.easecom.common.util.ListContainer;
import com.easecom.common.util.PageAction;
import com.easecom.common.util.ParamUtils;
import com.easecom.common.util.QueryCond;
import com.easecom.common.util.SessionContainer;
import com.easecom.common.util.SessionUtils;
import com.easecom.common.util.Tool;
import com.easecom.common.util.WebDialogBox;
import com.easecom.system.business.SysOrgMgr;
import com.easecom.system.exception.SystemException;
import com.easecom.system.model.SysOrg;

@SuppressWarnings("unchecked")
public class SysOrgAction extends BaseAction {

	SysOrgMgr mgr = new SysOrgMgr();

	/**
	 * 生成组织树
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward treelist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			SessionContainer sessionContainer = (SessionContainer) request
					.getSession().getAttribute("SessionContainer");

			String orgId = sessionContainer.getOrgId();
			String rootid = "FFFFFF";
			List treelist = null;
			treelist = mgr.getOrgtree(rootid, orgId);

			request.setAttribute("treelist", treelist);
			request.setAttribute("rootid", rootid);
			request.setAttribute("orgId", orgId);

			return mapping.findForward("tree");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取组织树时出错", "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);
			
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 得到组织列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {

			int currentPageInt = ParamUtils
					.getIntParameter(request, "currentPage", 1);
			String strItemsInPage = ParamUtils.getParameter(request, "totalItem",
					false);
			int itemsInPage = Integer.parseInt((String) SessionUtils.getAttribute(
					request, "RowCountPerPage"));
			if (strItemsInPage != null) {
				itemsInPage = ParamUtils.getIntParameter(request, "totalItem", 15);
			}

			String action = ParamUtils.getParameter(request, "pageAction", true);
			if ("".equals(action))
				action = PageAction.FIRST.toString();

			int jumpPage = ParamUtils.getIntParameter(request, "jumpPage", 1);

			String parentid = ParamUtils.getParameter(request, "parentid", true);

			SessionContainer sessionContainer = (SessionContainer) request
					.getSession().getAttribute("SessionContainer");
			// 设置查询条件
			Collection queryConds = new ArrayList();
			if(parentid != null && !parentid.equals("")){
				queryConds.add(new QueryCond("org.sysOrg.id", "String", "=", parentid));
			}else{
				String orgId = sessionContainer.getOrgId();
				Session ses = HibernateSessionFactory.openSession();
				SysOrg org1 = (SysOrg) ses.load(SysOrg.class, orgId);
				queryConds.add(new QueryCond("org.sysOrg.id", "String", "=", org1.getId()));
			}

			String fieldname = ParamUtils.getParameter(request, "fieldname", true);
			String op = ParamUtils.getParameter(request, "op", true);
			String fieldvalue = ParamUtils.getParameter(request, "fieldvalue", true);
			queryConds.add(new QueryCond(fieldname, "String", op, fieldvalue));
			
			
			// 查询
			ListContainer lc = mgr.list(queryConds, currentPageInt, itemsInPage,
					action, jumpPage);
			// 设置request.attribute
			request.setAttribute("parentid", parentid);
			request.setAttribute("lc", lc);
			// 返回list页
			return mapping.findForward("list");
			
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取组织列表时出错", "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 预增加部门
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward preAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			SysOrgForm vo = new SysOrgForm();

			String parentid = ParamUtils.getParameter(request, "parentid", true);
			
			
			vo.setParentcode(mgr.getCodeById(parentid));
			vo.setParenttype(mgr.getTypeById(parentid));
			vo.setCode(mgr.getNewCodeByparentid(parentid));
			vo.setSort(new Long(mgr.getNewSortByParentid(parentid)));
			vo.setParentid(parentid);

			request.setAttribute("SysOrgForm", vo);
			

			return mapping.findForward("add");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", "增加组织时出错", "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 增加部门
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		
		SysOrgForm vo = (SysOrgForm) form;
		try {

			mgr.add(vo);
			return mapping.findForward("list0");
//			return list(mapping, form, request, response);

		} catch (Exception ex) {
			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 预修改部门
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward preUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			String id = ParamUtils.getParameter(request, "id", true);
			SysOrgForm vo = mgr.view(id);
			request.setAttribute("SysOrgForm", vo);
			return mapping.findForward("update");

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "修改出错", "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 修改部门
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		SysOrgForm vo = (SysOrgForm) form;

		try {

			mgr.update(vo);
			
			return mapping.findForward("list0");
//			return list(mapping, form, request, response);

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");

		}
	}

	/**
	 * 查看部门详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			String id = ParamUtils.getParameter(request, "id", true);
			request.setAttribute("SysOrgForm", mgr.view(id));

			return mapping.findForward("view");

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取详细信息页面时出错", "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 删除部门详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			String[] ids = ParamUtils.getParameterValues(request, "id", true);

			mgr.delete(ids);

			return list(mapping, form, request, response);

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}
	
	
	public ActionForward deleteByIds(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			String ids = ParamUtils.getParameter(request, "ids", true);

			mgr.deleteByIds(ids);

			return list(mapping, form, request, response);

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 添加logo
	 * 
	 * @param mapping
	 * @param actionform
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward prelogoadd(ActionMapping mapping, ActionForm actionform,
			HttpServletRequest request, HttpServletResponse response) {

		String id = request.getParameter("orgid");

		try {

			String name = request.getParameter("orgname");

			request.setAttribute("orgid", id);
			request.setAttribute("orgname", name);

			return mapping.findForward("prelogoadd");

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 添加logo
	 * 
	 * @param mapping
	 * @param actionform
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward logoadd(ActionMapping mapping, ActionForm actionform,
			HttpServletRequest request, HttpServletResponse response) {

		SysOrgForm form = (SysOrgForm) actionform;
		form.setId(request.getParameter("orgid"));

		try {

			String filepath = this.getServlet().getServletContext().getRealPath("/");
			FormFile file = form.getFile();

			if (file != null) {

				if (mgr.panDuanWH(file)) {

					UploadCmd upload = mgr.logoupload(file, filepath + "\\logo\\");
					form.setFileName(upload.getTitle());
					form.setFilePath(upload.getFullPath());
				} else {

					ActionErrors errors = new ActionErrors();
					errors.add("totallylost", new ActionMessage(""));
					request.setAttribute(Globals.ERROR_KEY, errors);
					request.setAttribute("logoerror", errors);
					request.setAttribute("orgid", request.getParameter("orgid"));
					request.setAttribute("orgname", request.getParameter("orgname"));
					return mapping.findForward("logopreadd");
				}
			}

			mgr.logosave(form);

			return mapping.findForward("logoadd");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * logo列表
	 * 
	 * @param mapping
	 * @param actionform
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward logolist(ActionMapping mapping, ActionForm actionform,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			SessionContainer sessionContainer = (SessionContainer) request
					.getSession().getAttribute("SessionContainer");
			String orgid = sessionContainer.getOrgId();

			// 查询
			ListContainer lc = mgr.logolist(orgid);

			// 设置request.attribute
			request.setAttribute("lc", lc);

			// 返回list页
			return mapping.findForward("logolist");

		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取logo列表时出错", "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 文件下载控制类
	 * 
	 * @param mapping
	 * @param actionfrom
	 * @param request
	 * @param response
	 * @return
	 * @throws SystemException
	 * @throws Exception
	 */
	public ActionForward logodownload(ActionMapping mapping,
			ActionForm actionfrom, HttpServletRequest request,
			HttpServletResponse response) throws SystemException, Exception {

		try {

			String filepath = request.getParameter("filepath");
			String fileName = request.getParameter("filename");

			// liunx下载方式
			super.download(request, response, fileName, filepath);

			return null;
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 下载企业用户导入模板
	 * 
	 * @param mapping
	 * @param actionfrom
	 * @param request
	 * @param response
	 * @return
	 * @throws SystemException
	 * @throws Exception
	 */
	public ActionForward downloadformwork(ActionMapping mapping,
			ActionForm actionfrom, HttpServletRequest request,
			HttpServletResponse response) throws SystemException, Exception {

		try {

			String filepa = this.getServlet().getServletContext().getRealPath("/")
					+ "formwork\\企业用户导入模板.xls";

			super.download(request, response, "企业用户导入模板.xls", filepa);

			return null;
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);

			WebDialogBox dialog = new WebDialogBox(1, "下载模板时错误", ex.getMessage(),
					"返回", "javascript:window.history.back()");

			request.setAttribute("DialogBox", dialog);

			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 验证要删除的部门下面是否有国税用户
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 */
	public void validauser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
			String str = request.getParameter("str");
			System.out.println(":::::::"+str);
			System.out.println("");
			String loginname = Tool
					.getValue("Select login_name from sys_user where org_id in (" + str
							+ ") and isvalid=1");
			
			boolean boo = false;
			if (null != loginname && loginname.length() > 0) {
				boo = true;
			}
			
			response.setCharacterEncoding("UTF-8");
			
			PrintWriter writer = response.getWriter();
			
			writer.write(String.valueOf(boo));
			writer.flush();
			writer.close();

		} catch (Exception ex) {
			
			log.error(ex.getMessage(), ex);
			
			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");
			
			request.setAttribute("DialogBox", dialog);
		}
	}

}