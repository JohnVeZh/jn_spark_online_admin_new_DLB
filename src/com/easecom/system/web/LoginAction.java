/**
 * @(#)$CurrentFile
 *
 *<br> Copyright：Copyright (c) 2010
 *<br> @author XXXXX（XXXXX）
 *<br> 2010-05-01
 *<br> @version 1.0
 */

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.easecom.system.web;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.easecom.common.framework.struts.BaseAction;
import com.easecom.common.util.IpAddressUtil;
import com.easecom.common.util.LogUtils;
import com.easecom.common.util.ParamUtils;
import com.easecom.common.util.SessionContainer;
import com.easecom.common.util.Tool;
import com.easecom.system.business.LoginMgr;
import com.easecom.system.exception.SystemException;
import com.easecom.system.model.SysFunction;
import com.easecom.system.model.SysUser;

public class LoginAction extends BaseAction {

	private static LogUtils logger = LogUtils.getLogger(LoginAction.class);
	LoginMgr mgr = new LoginMgr();

	/**
	 * 登录控制类
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return 
	 * state
	 * 日志管理员登录  1
	 * 题库管理员登录  2
	 * 超级管理员登录  3
	 * 用户管理员登录  4
	 * 
	 * admin都可以 ，其它登录需要相应权限。根据固定角色判断。
	 * 
	 */
	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String username = ParamUtils
					.getParameter(request, "username", true);
			String password = ParamUtils
					.getParameter(request, "password", true);
			// 获取ip地址
			String ipaddress = IpAddressUtil.getIpAddr(request);
			// 1 2 3 4  
			int state = ParamUtils.getIntParameter(request, "state", 0);
			// menu first id
			String firstPid = "";
			
			logger.info(username);
			logger.info(password);
			logger.info(ipaddress);
			logger.info(state);
			
			// not null  
			if (username.equals("") || password.equals("")) {
				return mapping.findForward("adminlogin");
			}
			
			SessionContainer sessionContainer = (SessionContainer) request
					.getSession().getAttribute("SessionContainer");
			if (null == sessionContainer) {
				sessionContainer = new SessionContainer();
			}
			HttpSession session = request.getSession();

			// login  result    1 pass ; 0 failed
			String flag = "";
			flag = mgr.isValidUser(username, password, request,
					sessionContainer, session, state);
			if (null != flag && !"".equals(flag) && "1".equals(flag)) {
				Tool.AddLog(sessionContainer.getUserId(), username,
						"登录系统成功,IP:" + ipaddress+",state:"+state, "0", ipaddress);
				// 系统用户登录成功，拼接权限，去超级管理首页
				sessionContainer
						.setRoleId(Tool
								.getValue("select role_id from sys_user_role where user_id = '"
										+ sessionContainer.getUserId() + "'"));
				sessionContainer
						.setRoleName(Tool
								.getValue("select  role_name  from sys_user_role where user_id = '"
										+ sessionContainer.getUserId() + "'"));
				session.setAttribute("usercode", sessionContainer.getUserId());
				
				// 拼接首页一级栏目,
				String path = request.getContextPath();
				path = request.getScheme() + "://" + request.getServerName()
						+ ":" + request.getServerPort() + path;
				List OneMenu = new ArrayList();
				OneMenu = sessionContainer.getFunIds();
				Iterator it = OneMenu.iterator();
				StringBuffer OneMenu_str = new StringBuffer();
				int i = 0;
				while (it.hasNext()) {
					// 返回迭代的下一个元素。
					SysFunction sf = (SysFunction) it.next();
					if ("FFFFFF".equals(sf.getSysFunction().getId())) {
						if (i == 0) {
							firstPid = sf.getId();
						}
						// 只显示一级节点
						// OneMenu_str.append("<span class=\""+sf.getIcon()+" hand\" ><a href=\""+path+"/leftPages/accordition.jsp?pid="+sf.getId()+"\" target=\"frmleft\">"+sf.getName()+"</a></span>");
						// OneMenu_str.append("<span class=\"box_tool_line\"></span>");
						OneMenu_str.append("<a href=\"" + path
								+ "/leftPages/newleft.jsp?pid=" + sf.getId()
								+ "\" target=\"frmleft\">" + sf.getName()
								+ "</a>");
						i++;
					}
				}
				request.setAttribute("firstPid", firstPid);
				request.setAttribute("OneMenu_str", OneMenu_str.toString());
				
				// 超级管理员的话，首页出特定的功能
				if ("FFFFFF".equals(sessionContainer.getUserId())) {
					request.setAttribute("default_url", "");
				} else {
					// 其他用户，统一走角色规定的默认url
					request.setAttribute(
							"default_url",
							Tool.getValue(" SELECT  roleurl   FROM sys_user_role u LEFT   JOIN  sys_role r   ON u.role_id = r.ID  WHERE user_id =  '"
									+ sessionContainer.getUserId() + "'"));
				}

				//查询未读公告
				int count =	Tool.getIntValue("select count(id) from sys_notice_record where sys_user_id='"+sessionContainer.getUserId()+"' and state='0' ");
				request.setAttribute("count", count);
				
				if (state == 1){
					return mapping.findForward("admin");
				}else if(state == 2){
					return mapping.findForward("admin");
				}else if(state == 3){
					return mapping.findForward("admin");
				}else{
					return mapping.findForward("admin");
				}
				
			} else {
				Tool.AddLog(sessionContainer.getUserId(), username, "ERROR,IP:"
						+ ipaddress+",state:"+state, "0", ipaddress);
				logger.info("login error.");
				request.setAttribute("myerrors", "登录失败了,如忘记密码请联系管理员");//loginError
				if (state == 1){
					return mapping.findForward("loglogin");
				}else if(state == 2){
					return mapping.findForward("questionlogin");
				}else if(state == 3){
					return mapping.findForward("adminlogin");
				}else{
					return mapping.findForward("userlogin");
				}
					
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e.getMessage(), e);
			return mapping.findForward("adminlogin");
		}
	}

	/**
	 * 回到前台页面，加载其页面显示信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws SystemException
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public ActionForward preLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SystemException, Exception {
		String urltype = ParamUtils.getParameter(request, "urltype", true);
		int state = 0;
		state = Integer.parseInt(urltype);
		if (state == 1){
			return mapping.findForward("loglogin");
		}else if(state == 2){
			return mapping.findForward("questionlogin");
		}else if(state == 3){
			return mapping.findForward("adminlogin");
		}else{
			return mapping.findForward("userlogin");
		}

	}

	/**
	 * 注销
	 * 
	 * @throws Exception
	 * @throws SystemException
	 */
	public ActionForward logout(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SystemException, Exception {
		// 获取ip地址
		String ipaddress = IpAddressUtil.getIpAddr(request);
		HttpSession session = request.getSession();
		String urltype = "";
		Cookie rememberCookie = new Cookie("remember", "F");
		Cookie passwordCookie = new Cookie("password", "");
		rememberCookie.setMaxAge(10 * 24 * 60 * 60);
		passwordCookie.setMaxAge(0);
		response.addCookie(rememberCookie);
		response.addCookie(passwordCookie);
		if (session.getAttribute("SessionContainer") != null) {

			String username = ((SessionContainer) session
					.getAttribute("SessionContainer")).getUserName();
			String userid = ((SessionContainer) session
					.getAttribute("SessionContainer")).getUserId();
			urltype = ((SessionContainer) session
					.getAttribute("SessionContainer")).getUrltype();
			Tool.AddLog(userid, ((SessionContainer) session
					.getAttribute("SessionContainer")).getLoginName(), "退出系统",
					"0", ipaddress);

			session.removeAttribute("SessionContainer");

			// 将session设置为失效
			session.invalidate();

			System.out.println("用户：" + username + "已经注销");
		} else {
			System.out.println("用户已注销");
		}
		//return mapping.findForward("1".equals(urltype) ? "shoplogin"		: "adminlogin");
		int state = 3;
		try {
			state = Integer.parseInt(urltype);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		if (state == 1){
			return mapping.findForward("loglogin");
		}else if(state == 2){
			return mapping.findForward("questionlogin");
		}else if(state == 3){
			return mapping.findForward("adminlogin");
		}else{
			return mapping.findForward("userlogin");
		}

	}

	 
}