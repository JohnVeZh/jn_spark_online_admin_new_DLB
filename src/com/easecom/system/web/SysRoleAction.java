/**
 * @(#)$CurrentFile
 *
 *<br> Copyright：Copyright (c) 2010
 *<br> @author XXXXX（XXXXX）
 *<br> 2010-05-01
 *<br> @version 1.0
 */

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.easecom.system.web;

import java.util.ArrayList;
import java.util.Collection;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.easecom.common.framework.struts.BaseAction;
import com.easecom.common.util.ListContainer;
import com.easecom.common.util.PageAction;
import com.easecom.common.util.ParamUtils;
import com.easecom.common.util.QueryCond;
import com.easecom.common.util.SessionContainer;
import com.easecom.common.util.SessionUtils;
import com.easecom.common.util.Tool;
import com.easecom.common.util.WebDialogBox;
import com.easecom.system.business.SysRoleMgr;

/**
 * MyEclipse Struts Creation date: 01-10-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="system//sysrole" name="SysRoleForm" parameter="act"
 *                scope="request" validate="true"
 */
public class SysRoleAction extends BaseAction {
	SysRoleMgr mgr = new SysRoleMgr();

	/**
	 * 得到角色列表
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward list(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SessionContainer sessionContainer=(SessionContainer)request.getSession().getAttribute("SessionContainer");
		if(null==sessionContainer)
			sessionContainer=new SessionContainer();
		try {

			int currentPageInt = ParamUtils
					.getIntParameter(request, "currentPage", 1);
			String strItemsInPage = ParamUtils.getParameter(request, "totalItem",
					false);
			int itemsInPage = Integer.parseInt((String) SessionUtils.getAttribute(
					request, "RowCountPerPage"));
			if (strItemsInPage != null) {
				itemsInPage = ParamUtils.getIntParameter(request, "totalItem", 15);
			}

			String action = ParamUtils.getParameter(request, "pageAction", true);
			if ("".equals(action))
				action = PageAction.FIRST.toString();

			int jumpPage = ParamUtils.getIntParameter(request, "jumpPage", 1);
			if ("".equals(action))
				action = PageAction.FIRST.toString();

			// 设置查询条件
			Collection queryConds = new ArrayList();
			
			//当前登录人员权限条件
			if(!sessionContainer.getUserId().equals("FFFFFF")){
				queryConds.add(new QueryCond("role.shopId", "String", "=", Tool.getValue("select shop_id from sys_user where id='"+sessionContainer.getUserId()+"'")));
			}
			
			// 查询
			ListContainer lc = mgr.list(queryConds, currentPageInt, itemsInPage,
					action, jumpPage);

			// 设置request.attribute
			request.setAttribute("lc", lc);

			// 返回list页
			return mapping.findForward("list");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取角色列表时出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 预增加角色
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward preAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			SysRoleForm vo = new SysRoleForm();
			String state = ParamUtils.getParameter(request, "state",
					"0");
			request.setAttribute("state",state);
			// 保存到request中
			request.setAttribute("SysRoleForm", vo);
			
			SessionContainer sessionContainer = (SessionContainer) request
					.getSession().getAttribute("SessionContainer");
					if(sessionContainer==null){
						sessionContainer = new SessionContainer();
					}
			
			String shopId = Tool.getValue("select shop_id from sys_user where id='"+sessionContainer.getUserId()+"'");
			 String shopOpen = "";
			if(shopId.equals("FFFFFF")){
			  	shopOpen = Tool.getList("select id,name from shop ", "name", "id");
			}else{
				shopOpen = Tool.getList("select id,name from shop where id='"+shopId+"'", "name", "id");
			}
			request.setAttribute("shopOpen", shopOpen);

			return mapping.findForward("add");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "增加角色时出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 增加角色
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		SysRoleForm vo = (SysRoleForm) form;

		try {

			mgr.add(vo);

			return list(mapping, form, request, response);
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}

	}

	/**
	 * 预修改角色
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward preUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			String id = ParamUtils.getParameter(request, "id", true);
			SysRoleForm vo = mgr.view(id);
			request.setAttribute("SysRoleForm", vo);
			
			SessionContainer sessionContainer = (SessionContainer) request
					.getSession().getAttribute("SessionContainer");
					if(sessionContainer==null){
						sessionContainer = new SessionContainer();
					}
			
			String shopId = Tool.getValue("select shop_id from sys_user where id='"+sessionContainer.getUserId()+"'");
			 String shopOpen = "";
			if(shopId.equals("FFFFFF")){
			  	shopOpen = Tool.getList("select id,name from shop ", "name", "id",vo.getShopId());
			}else{
				shopOpen = Tool.getList("select id,name from shop where id='"+shopId+"'", "name", "id");
			}
			request.setAttribute("shopOpen", shopOpen);

			return mapping.findForward("update");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "查询角色时出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 修改角色
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		SysRoleForm vo = (SysRoleForm) form;

		try {

			mgr.update(vo);

			return list(mapping, form, request, response);
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 查看角色详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward view(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			String id = ParamUtils.getParameter(request, "id", true);

			request.setAttribute("SysRoleForm", mgr.view(id));

			return mapping.findForward("view");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取角色详细信息页面时出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 删除角色
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			String[] ids = ParamUtils.getParameterValues(request, "id", true);
			mgr.delete(ids);

			return list(mapping, form, request, response);
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", ex.getMessage(), "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 给角色预配置功能权限
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward preCfgFun(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SessionContainer sessionContainer=(SessionContainer)request.getSession().getAttribute("SessionContainer");
		if(null==sessionContainer)
			sessionContainer=new SessionContainer();
		try {

			String roleid = ParamUtils.getParameter(request, "id", true);
			
			String state = ParamUtils.getParameter(request, "state", "1");
			request.setAttribute("state",state);

			request.setAttribute("roleid", roleid);

			String funrootid = "FFFFFF";

			request.setAttribute("funrootid", funrootid);
			String shopId = Tool.getValue("select shop_id from sys_user where id='"+sessionContainer.getUserId()+"'");
			if(!shopId.equals("FFFFFF")){
				request.setAttribute("nodes", mgr.getFuntree(roleid, funrootid,sessionContainer.getUserId()));
			}else{
				request.setAttribute("nodes", mgr.getFuntree(roleid, funrootid));
			}

			return mapping.findForward("precfgfun");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取功能分配页面时出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}
	
	/**
	 * 给角色预配置功能权限
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward cfgFunView(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			String state = ParamUtils.getParameter(request, "state", "0");
			String roleid = ParamUtils.getParameter(request, "id", true);
			String orgId = ParamUtils.getParameter(request, "orgId", true);

			request.setAttribute("roleid", roleid);
			request.setAttribute("orgId", orgId);

			String funrootid = "FFFFFF";

			request.setAttribute("funrootid", funrootid);
			request.setAttribute("nodes", mgr.getFuntree(roleid, funrootid));

			return mapping.findForward("cfgfunview");
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "获取功能分配页面时出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}

	/**
	 * 给角色配置功能权限
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward saveFun(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {

			String roleid = ParamUtils.getParameter(request, "roleid", true);
			String funids = ParamUtils.getParameter(request, "funids", true);

			mgr.saveFun(roleid, funids);

			return list(mapping, form, request, response);
		} catch (Exception ex) {

			log.error(ex.getMessage(), ex);
			WebDialogBox dialog = new WebDialogBox(1, "错误", "功能分配出错", "返回",
					"javascript:window.history.back()");
			request.setAttribute("DialogBox", dialog);
			return mapping.findForward("DialogBox");
		}
	}
	
	
}